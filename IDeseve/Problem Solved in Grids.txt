

Recursion: Solving a Maze
https://www.cs.bu.edu/teaching/alg/maze/
FIND-PATH(x, y)

if (x,y outside maze) return false
if (x,y is goal) return true
if (x,y not open) return false
mark x,y as part of solution path
if (FIND-PATH(North of x,y) == true) return true
if (FIND-PATH(East of x,y) == true) return true
if (FIND-PATH(South of x,y) == true) return true
if (FIND-PATH(West of x,y) == true) return true
unmark x,y as part of solution path
return false

Using Algorithm

To use FIND-PATH to find and mark a path from the start to the goal with our given representation of mazes, we just need to:
Locate the start position (call it startx, starty).
Call FIND-PATH(startx, starty).
Re-mark* the start position with 'S'.
*In the algorithm, the start position (marked 'S') needs to be considered an open position and must be marked as part of the path for FIND-PATH to work correctly. That is why we re-mark it at the end.



To store sub problems we would use a two dimensional table.
Each cell Table(i,j) will store no of paths which are possible to reach cell(i,j). Our answer will be then table(m,n).

Cell (i,j) can be reached at by either coming from (i-1,j) (Moving down)
           or by coming from cell (i,j-1) (Moving right)
           or by coming from cell (i-1, j-1) (Moving diagonally).

So our Table(i,j) can be calculated as

Table(i,j) = Table(i-1,j) + Table(i,j-1)+ table(i-1,j-1)

Also, to reach any cell in first column is 1 and cell in first row is also 1. Hence,

Table(i,0) = Table(0,j) =1
https://algorithmsandme.in/2014/04/17/dynamic-programming-count-all-possible-paths-in-maze/



http://www.techiedelight.com/find-total-number-unique-paths-maze-source-destination/





Finding Minimum Cost Path in a 2D Matrix
Given a 2D matrix, Cost[][], where Cost[i][j] represent the cost of visit cell Cost[i][j], find minimum cost to reach a given cell Cost[n][m], where a cell can be reach from it’s left (by moving one step right) or from top (by moving one step down).
https://algorithmsandme.in/2017/08/29/find-minimum-cost-path-in-a-2d-matrix-dp/

findCost(i,j, cost) = cost(i,j) + Min( findCost(i-1,j, cost),
                                       findCost(i,j-1, cost))


Let’s create a two dimensional matrix and fill it up bottom up. Let’s consider the top most row in matrix. Any cell in top most row can be reach only from left.

MinCost(0,j) = MinCost(0,j-1) + Cost[0][j]
Similarly, cell in leftmost column can only be reached from top.

MinCost(i,0) = MinCost(i-1,0) + Cost[i][0]
For all other cells,

MinCost(i,j) = Min( MinCost(i-1),j), MinCost(i, j-1)) + Cost[i][j]

MinCost[0][0] = Cost[0][0];
 
    // initialize first row of MinCost matrix
    for (int i=1; i<N; i++){
        MinCost[0][i] = MinCost[0][i-1] + Cost[0][i];
    }
 
    for (int i=1; i<M; i++){
        MinCost[i][0] = MinCost[i-1][0] + Cost[i][0];
    }
     
    for (int i=1;i<M; i++){
        for (int j=1; j<N; j++){
           MinCost[i][j] = min(MinCost[i-1][j],
                           MinCost[i][j-1]) + Cost[i][j];
        }
    }
 
    return MinCost[M-1][N-1];
     

def numberOfPaths(m, n):
    # Create a 2D table to store
    # results of subproblems
    count = [[0 for x in range(m)] for y in range(n)]
   
    # Count of paths to reach any 
    # cell in first column is 1
    for i in range(m):
        count[i][0] = 1;
   
    # Count of paths to reach any 
    # cell in first column is 1
    for j in range(n):
        count[0][j] = 1;
   
    # Calculate count of paths for other
    # cells in bottom-up 
    # manner using the recursive solution
    for i in range(1, m):
        for j in range(n):             
            count[i][j] = count[i-1][j] + count[i][j-1]
    return count[m-1][n-1]

































